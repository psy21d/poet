Функциональное тестирование — это тестирование ПО в целях проверки реализуемости функциональных требований, то есть способности ПО в определённых условиях решать задачи, нужные пользователям. Функциональные требования определяют, что именно делает ПО, какие задачи оно решает.

Функциональные требования включают в себя:

Функциональная пригодность.
Точность.
Способность к взаимодействию.
Соответствие стандартам и правилам.
Защищённость.

________________________________________________________

Модульное тестирование, или юнит-тестирование (англ. unit testing) — процесс в программировании, позволяющий проверить на корректность отдельные модули исходного кода программы, наборы из одного или более программных модулей вместе с соответствующими управляющими данными, процедурами использования и обработки.

Идея состоит в том, чтобы писать тесты для каждой нетривиальной функции или метода. Это позволяет достаточно быстро проверить, не привело ли очередное изменение кода к регрессии, то есть к появлению ошибок в уже оттестированных местах программы, а также облегчает обнаружение и устранение таких ошибок.

________________________________________________________

Интеграционное тестирование – вид тестирования, при котором на соответствие требований проверяется интеграция модулей, их взаимодействие между собой, а также интеграция подсистем в одну общую систему. Для интеграционного тестирования используются компоненты, уже проверенные с помощью модульного тестирования, которые группируются в множества. Данные множества проверяются в соответствии с планом тестирования, составленным для них, а объединяются они через свои интерфейсы.

________________________________________________________

Нагрузочное тестирование (англ. load testing) — подвид тестирования производительности, сбор показателей и определение производительности и времени отклика программно-технической системы или устройства в ответ на внешний запрос с целью установления соответствия требованиям, предъявляемым к данной системе (устройству).

Для исследования времени отклика системы на высоких или пиковых нагрузках производится стресс-тестирование, при котором создаваемая на систему нагрузка превышает нормальные сценарии её использования. Не существует чёткой границы между нагрузочным и стресс-тестированием, однако эти понятия не стоит смешивать, так как эти виды тестирования отвечают на разные бизнес-вопросы и используют различную методологию.

________________________________________________________

В процессе разработки сложного программного продукта важно всё. 
Начиная с этапа проектирования, подразумевающего внешний функционал (пользовательский), внутреннее устройство программного продукта, архитектуру.
Далее идёт этап разработки, в котором модульное тестирование является важной частью процесса, так как при этом программистам не нужно часами выискивать сломанную функцию и строчку кода в ней.
На этапе внедрения производится нагрузочное тестирование и функциональное тестирование. Эти методы позволяют понять, насколько продукт выдерживает требования качества.

Этап проектирования крайне важен при построении программных комплексов. Для того, чтобы техзадачи программистам ставились не по типу "сделай нам, чтобы работало", а с точными архитектурными требованиями. Чтобы программный комплекс был единый, с едиными внутренними правилами и качеством кода. На этом этапе крайне важна оптимизация задач. 

На этапе написания кода важен единый стиль, подход.
Также важно, чтобы код был поддерживаемый, понятный, прокомментированный.

Очень важен этап подготовки к внедрению (production), на этом этапе нужно проверить, всё ли реализовано правильно с точки зрения пользователя, нет ли непредсказуемого поведения, не "падает" ли программа при нестандартном использовании ("вы не туда нажимаете"), проверить на ошибки окончательно, провести нагрузочное тестирование.

Если программный комплекс состоит из раздельных компонент, взаимодействующих между собой, то проводится интеграционное тестирование.

В следующих версиях программы возможен рефакторинг, улучшения API, расширение функций. Это должно быть гармонично развито, без ущерба к настоящему функционалу на данный момент.